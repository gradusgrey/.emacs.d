# -*- buffer-read-only: t; eval: (linum-mode 0)-*-
#+TITLE: My Emacs configuration

* General
** UI
*** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :demand t
  :custom
  (doom-themes-enable-bold t)
  :config
  (load-theme 'doom-material t)
  ;; (load-theme 'doom-one-light t)
)

(use-package all-the-icons
  :ensure t)

  (set-face-attribute 'default nil :height 165)
  (setq ring-bell-function 'ignore) ;; disable bell
  (tool-bar-mode -1) ;; disable ugly toolbar
  (scroll-bar-mode -1) ;; disable ugly scroll bar
#+END_SRC

*** More informative modeline and mini-buffer
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config (setq doom-modeline-height 15
                doom-modeline-bar-width 3
                doom-modeline-enable-word-count t)
)

(display-time-mode 1) ;; displays time

(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))


(use-package nyan-mode
  :init
  (nyan-mode)
  :config
  (setq nyan-wavy-trail t)
)

;; do not load average data
(setq display-time-default-load-average nil)
(setq display-time-string-forms
        '((format-time-string "%m/%d (%a) %H:%M")))
(display-battery-mode t) ;; displays battery
#+END_SRC

*** Line/column numbers & Highlighting stuff
#+BEGIN_SRC emacs-lisp
(column-number-mode 1) ;; always displays the column number
(add-hook 'prog-mode-hook 'linum-mode) ;; displays line numbers

(global-set-key [f8] 'neotree-toggle) ;; side bar
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

(global-hl-line-mode 1) ;; highlight current line
(show-paren-mode 1) ;; highlight matching parens
(setq show-paren-delay 0.0) ;; no delay in showing paren

(global-hl-todo-mode 1) ;; highlight TODOs
(add-hook 'TeX-update-style-hook 'hl-todo-mode)
(setq hl-todo-highlight-punctuation ":"
      hl-todo-keyword-faces
      '(("TODO"       error bold)
        ("FIXME"      warning bold)
        ("NOTE"       success bold))
      hl-todo-include-modes
      (quote (LaTeX-mode emacs-lisp-mode)))
#+END_SRC
** Hooks and start up
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

(setq initial-buffer-choice "~/Org/planning.org") ;; enter with planning.org
(global-set-key (kbd "M-C-f") 'toggle-frame-fullscreen) ;; full-screen
(desktop-save-mode 1) ;; recover sessions on startup
(global-auto-revert-mode t) ;; auto revert
(fset 'yes-or-no-p 'y-or-n-p) ;; y/n instead of yes/no

;; add LaTeX-mode to prog-mode
(add-hook 'LaTeX-mode-hook
          (lambda () (run-hooks 'prog-mode-hook)))
;; add org-mode to prog-mode
(add-hook 'org-mode-hook
          (lambda () (run-hooks 'prog-mode-hook)))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))

(add-to-list
 'display-buffer-alist
 '("\\.pdf$*" (display-buffer-reuse-window display-buffer-in-side-window)
   (window-height . 20)
   (side . top)))

(add-hook 'org-mode-hook
          (lambda () (org-indent-mode t)) t)

(global-set-key (kbd "C-` ") 'shell)

(put 'text-scale-adjust 'disabled t)

(setq confirm-kill-emacs 'y-or-n-p)

(global-set-key [(control wheel-up)] 'nil)
(global-set-key [(control wheel-down)] 'nil)
#+END_SRC

** =alert=
#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+END_SRC
* Editing
** Type with ease
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1) ;; typing replaces selected word

(global-flycheck-mode 1) ;; flycheck
(add-hook 'text-mode-hook 'flyspell-mode) ;; flyspell
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(setq ispell-program-name "hunspell")
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))

(setq-default auto-fill-function 'do-auto-fill) ;; auto-fill-mode enabled universally
(setq-default fill-column 85)

(setq-default cursor-type 'box)
(blink-cursor-mode 0)
(setq-default tab-width 2)

(electric-pair-mode 1) ;; automatically close parens, etc.

(defun transpose-windows ()
  (interactive)
  (let ((this-buffer (window-buffer (selected-window)))
        (other-buffer (prog2
                          (other-window +1)
                          (window-buffer (selected-window))
                        (other-window -1))))
    (switch-to-buffer other-buffer)
    (switch-to-buffer-other-window this-buffer)
    (other-window -1)))
#+END_SRC
** Code completion
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  (vertico-indexed-mode)
  (vertico-reverse-mode)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)
  (setq vertico-cycle t)
)

(use-package savehist
  :init
  (savehist-mode)
)

(use-package yasnippet
   :ensure t
   :init
   (yas-global-mode 1)
)

(defun my-macro-math-eval-and-round-region (beg end &optional digits)
  (interactive "r\nP")
  (macro-math-eval-region
   beg end 1 (or digits 3)))

(use-package macro-math
  :bind ("\C-x~" . my-macro-math-eval-and-round-region)
)
#+END_SRC

** TODO Quick dictionary
#+BEGIN_SRC emacs-lisp
;; quick dictionary and thesaurus
(use-package define-word
  :bind ("C-c d" . define-word-at-point))

(use-package mw-thesaurus
  :bind ("C-c t" . mw-thesaurus-lookup-at-point)
)
#+END_SRC
** Better comments
#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
	:bind ("M-;" . comment-dwim-2)
	)
#+END_SRC
** =markdown-mode=
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
 )
#+END_SRC
** =drag-stuff=
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t
  :config (drag-stuff-global-mode 1)
  :bind (
    ("<C-M-up>" . drag-stuff-up)
    ("<C-M-down>" . drag-stuff-down)
   ("<C-M-left>" . drag-stuff-left)
   ("<C-M-right>" . drag-stuff-right))
 )
#+END_SRC

** multicursor
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
)
#+END_SRC

** TODO highlight-symbol
#+BEGIN_SRC emacs-lisp
(global-set-key [(control f3)] 'highlight-symbol)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [(shift f3)] 'highlight-symbol-prev)
(global-set-key [(meta f3)] 'highlight-symbol-query-replace)
#+END_SRC

* org-mode
** prerequisite
#+BEGIN_SRC
(global-font-lock-mode 1)
#+END_SRC
** =org=
#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org$" . org-mode)
  :init (org-clock-persistence-insinuate)
  :commands (org-clock-persistence-insinuate)
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c b" . org-switchb)
         ("C-c C-x C-o" . org-clock-out)
         )
  :config
	(setq org-agenda-files '("~/Org"))
  (setq org-clock-persist 'history
        org-startup-indented t
        org-default-notes-file (concat org-directory "/notes.org")
        org-support-shift-select t
        org-todo-keywords (quote ((sequence "TODO" "IN PROGRESS" "|" "DONE")))
        org-todo-keyword-faces (quote (("IN PROGRESS" :foreground "orange" :weight bold)))
        org-clock-idle-time 15
        agenda-skip-scheduled-if-deadline-is-shown 'repeated-after-deadline

        org-agenda-deadline-faces
        '((1.001 . error)
          (1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . org-upcoming-distant-deadline))

        org-columns-default-format "%50ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM"
        )
  (setq inhibit-compacting-font-caches t)
  ;; (add-to-list 'org-modules '(org-habit org-crypt))
)
#+END_SRC

** =org-capture=
#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :config
  ;; append to the last headline by default
  ;; does not support multiple entries within the same day
  (defun org-journal-find-location ()
    (org-journal-new-entry t)
    (goto-char (point-max))
    (re-search-backward "^\\*")
    )

  (setq org-capture-templates
      '(("t" "TODO Entry" entry (file "~/Org/Planning.org")
         "* TODO %^{Description}\n")
        ("j" "Journal Entry" entry
           (function org-journal-find-location)
           "* %(format-time-string org-journal-time-format) %^{Title}\n%?")
        ("r" "Weekly Review" entry
           (function org-journal-find-location)
           "* Weekly Review %(format-time-string org-journal-time-format)\n%i%?" :created t)
        ("k" "Quote" entry (file "~/Org/Babel/quotes.org")
         "* %^{Author}, /%^{Work}/\n%U\n%i#+BEGIN_QUOTE\n%?\n#+END_QUOTE\n")
        ("b" "Book" entry (file "~/Org/Babel/books.org")
         "* TODO %^{Work}\n+ %^{Author}\n+ %u\n")
        )
      )
)
#+END_SRC

** =org-bullets=
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** =org-journal=
#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :ensure t
  :init
  :custom
  (org-journal-file-type 'yearly)
  (org-journal-file-format "%Y.org")
  (org-journal-dir  "~/Org/journal/")
  (org-journal-date-format "%A, %m/%d/%Y")
  (org-journal-time-format "%H:%M")
)
#+END_SRC

** =org-pomodoro=
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :ensure t
  :after org
  :bind (("C-c p" . org-pomodoro))
  :config
  (setq org-pomodoro-ticking-sound-p nil
        org-clock-mode-line-total 'today
        org-pomodoro-manual-break t
        org-pomodoro-length 50
        org-pomodoro-short-break-length 5
        org-pomodoro-long-break-length 10
        org-pomodoro-long-break-frequency 2
        org-pomodoro-finished-sound "~/.emacs.d/audio/goes-without-saying.mp3"
        org-pomodoro-overtime-sound "~/.emacs.d/audio/goes-without-saying.mp3"
        org-pomodoro-short-break-sound "~/.emacs.d/audio/deduction.mp3"
        org-pomodoro-long-break-sound "~/.emacs.d/audio/solemn.mp3")
)
#+END_SRC
* LaTeX
** Set path
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))
(setq exec-path (append exec-path '("/Library/TeX/texbin/")))
;; Add /Library/TeX/texbin/ to emacs' PATH variable
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
(setq exec-path (append exec-path '("/usr/local/bin/")))
#+END_SRC

** =AUCTeX=
#+BEGIN_SRC emacs-lisp
(eval-after-load 'latex
  '(setq LaTeX-clean-intermediate-suffixes
         (append LaTeX-clean-intermediate-suffixes
                 (list "\\.fdb_latexmk" "\\.tex~" "\\.log" "\\.tdo"))
         LaTeX-clean-output-suffixes
         (append LaTeX-clean-output-suffixes
                 (list "\\.dvi" "\\.ps" "\\.xdv" "\\.log" "\\.prv" "\\.fmt"))))

(use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . LaTeX-mode)
    :bind ("s-[" . TeX-command-run-all) ;; C-c C-a
    :config
    (setq TeX-auto-save t
          TeX-parse-self t
          LaTeX-electric-left-right-brace 1 ;; automatic close tags
          TeX-source-correlate-method 'synctex
          TeX-source-correlate-mode t
          TeX-source-correlate-start-server t)

    (setq-default TeX-master nil)
    ;; matching dollar sign
    (add-hook 'LaTeX-mode-hook
              (lambda () (set (make-local-variable 'TeX-electric-math)(cons "$" "$")))
              'TeX-source-correlate-mode ;; correlate enabled
              )

  ;;  open preview using pdf-tools
  ;;  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
  ;;        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
 ;; DEPRECATED
 ;; use Skim as external viewer
  (add-hook 'LaTeX-mode-hook
            (lambda()
            (add-to-list 'TeX-expand-list
                           '("%q" skim-make-url))))
(defun skim-make-url ()
  (concat
   (TeX-current-line)
   " \""
   (expand-file-name (funcall file (TeX-output-extension) t)
                    (file-name-directory (TeX-master-file)))
   "\" \""
   (buffer-file-name)
   "\""))
 (setq TeX-view-program-list
      '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %q")))
 (setq TeX-view-program-selection '((output-pdf "Skim")))
)
#+END_SRC
** =cdlatex=
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'cdlatex ;; disable cdlatex auto paren
    (lambda ()
      (substitute-key-definition 'cdlatex-pbb nil cdlatex-mode-map)
      (substitute-key-definition 'cdlatex-dollar nil cdlatex-mode-map)
      ))

  (use-package cdlatex
    :hook (LaTeX-mode . turn-on-cdlatex)
    :ensure t
    :init
    ;; does not really work but putting them here anyways
    (setq cdlatex-math-modify-prefix 96  ;; "`"
          cdlatex-math-symbol-prefix 64) ;; "@"
    (setq cdlatex-math-symbol-alist
          '((?0 ("\\varnothing" ))
            (?e ("\\varepsilon"))
            (?> ("\\geq"))
            (?< ("\\leq" "\\vartriangleleft"))
            (123 ("\\subseteq" "\\subset"))
            (125 ("\\supset" "\\supseteq"))
            (?~ ("\\simeq" "\\approx"))
            (?! ("\\neq" "\\neg"))
            (?c ("\\circ"))
            (?. ("\\ldots" "\\cdot"))
            (?[ ("\\Longleftarrow"))
            (?] ("\\Longrightarrow" "\\Rightarrow"))
            (?+ ("\\oplus"))
            (?| ("\\mid"))
            (?F ("\\Phi"))
            (?n ("\\nabla"))
            (?t ("\\tau" "\\to"))
            (?S ("\\sum" "\\Sigma"))
            (?* ("\\times" "\\otimes"))
            (?= ("\\equiv"))
            (?B ("\\Box"))
            (?D ("\\Delta" "\\Diamond"))
            ))
    (setq cdlatex-math-modify-alist
          '((?b "\\mathbb" "\\textbf" t nil nil)
            (?c "\\mathcal" nil t nil nil)
            (?2 "\\sqrt" nil t nil nil)
            (?t "\\text" nil t nil nil)
            (?v "\\vec" nil t nil nil)
            (?f "\\mathfrak" nil t nil nil)
            (?m "\\pmod" nil t nil nil)
            (?- "\\overline" nil t nil nil)
            (?_ "\\underline" "\\underline" t nil nil)
            (?~ "\\widetilde" nil t nil nil)
            (?^ "\\widehat" nil t nil nil)
            ))
    (setq cdlatex-command-alist
        '(("axm" "Insert axiom environment"
           "" cdlatex-environment ("axiom") t nil)
          ("prop" "Insert proposition environment"
             "" cdlatex-environment ("proposition") t nil)
          ("lcm" "Insert \\text{lcm}"
           "\\text{lcm}" cdlatex-position-cursor nil nil t)
          ("gal" "Insert \\text{Gal}()"
           "\\text{Gal}(?)" cdlatex-position-cursor nil nil t)
          ("irr" "Insert \\text{irr}_{}()"
           "\\text{irr}_{?}()" cdlatex-position-cursor nil nil t)
          ("im" "Insert \\text{im}()"
           "\\text{im}(?)" cdlatex-position-cursor nil nil t)
          ))
  )
#+END_SRC
* GitHub integration
** =Magit=
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  :bind
  ("C-x g" . magit-status))
#+END_SRC

** Git-gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src
* python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  (setq elpy-rpc-virtualenv-path 'current
        elpy-rpc-python-command "python3")
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt --profile=default"
  )
)

(use-package ein
  :ensure t
  )
#+END_SRC
