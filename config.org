# -*- buffer-read-only: t -*-
#+TITLE: My Emacs configuration 💻

* General
** UI
*** Theme and Font
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :demand t
  :custom
  (doom-themes-enable-bold t)
	(doom-themes-padded-modeline t)
  :config
  (load-theme 'doom-material t)
	(doom-themes-org-config)
)

(use-package nerd-icons
	:demand t
)

(use-package nerd-icons-completion
  :demand t
  :hook
  (marginalia-mode . nerd-icons-completion-marginalia-setup)
  (after-init . nerd-icons-completion-mode)
)

(set-fontset-font t 'han "Kaiti SC")
(set-face-attribute 'default nil :family "Monospace" :height 175)
(set-face-attribute 'variable-pitch nil :family "ETBembo" :height 1.27)

(use-package mixed-pitch
  :hook
  (org-mode . mixed-pitch-mode)
	:bind ("C-x m" . mixed-pitch-mode)
	:custom
	(mixed-pitch-set-height t)
	:config
	(add-to-list 'mixed-pitch-fixed-pitch-faces 'font-lock-comment-face)
	)

(global-set-key (kbd "C-x v") 'variable-pitch-mode)
#+END_SRC
*** Cosmetics
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore) ;; disable bell
(tool-bar-mode -1) ;; disable ugly toolbar
(scroll-bar-mode -1) ;; disable ugly scroll bar
(set-face-attribute 'region nil :extend t :background "#4d6778")

(set-face-attribute 'font-lock-comment-face nil :foreground "#84959c")
(set-face-attribute 'font-lock-doc-face nil :foreground "#84959c")
(set-face-attribute 'org-block-begin-line nil :foreground "#84959c")

(setq-default cursor-type 'box)
(blink-cursor-mode 0)

(use-package emojify
  :hook (org-mode special-mode))

(column-number-mode 1) ;; always displays the column number
(add-hook 'prog-mode-hook 'display-line-numbers-mode) ;; displays line numbers

(global-hl-line-mode 1) ;; highlight current line
(show-paren-mode 1) ;; highlight matching parens
(setq show-paren-delay 0.0) ;; no delay in showing paren

(use-package rainbow-delimiters
  :demand t
  :custom (rainbow-delimiters-max-face-count 4)
  :hook (prog-mode . rainbow-delimiters-mode)
)
#+end_src
*** Modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode 1) ;; displays time

(use-package doom-modeline
	:demand t
  :init (doom-modeline-mode 1)
  :custom
	(doom-modeline-height 30)
	(doom-modeline-bar-width 3)
  (doom-modeline-time-analogue-clock nil)
	)

(use-package nyan-mode
  :init (nyan-mode)
  :custom (nyan-wavy-trail t)
	)

(setq mode-line-right-align-edge 'right-margin)
;; do not load average data
(setq display-time-default-load-average nil)
(setq display-time-string-forms
        '((format-time-string "%m/%d (%a) %H:%M")))
(display-battery-mode t) ;; displays battery
#+END_SRC
*** Mini-buffer
#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))

(use-package vertico
  :init
  (vertico-mode)
  (vertico-indexed-mode)
  (vertico-reverse-mode)
	:custom
	(vertico-resize t)
	(vertico-cycle t)
	(read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
	)

(use-package vertico-directory
  :after vertico
	:ensure nil
  :bind (:map vertico-map
							("M-b" . vertico-directory-up))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src
** Hooks and Other Behavior
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice "~/Org/planning.org") ;; enter with planning.org
(global-set-key (kbd "M-C-f") 'toggle-frame-fullscreen) ;; full-screen
(desktop-save-mode 1) ;; recover sessions on startup
(global-auto-revert-mode t) ;; auto revert
(fset 'yes-or-no-p 'y-or-n-p) ;; y/n instead of yes/no
(setq custom-unlispify-tag-names nil)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(use-package vterm
	:bind ("C-`" . vterm)
	:custom
	(vterm-shell "/usr/local/bin/fish")
	:config
	(add-hook 'vterm-mode-hook
						(lambda ()
               (set (make-local-variable 'buffer-face-mode-face) '(:family "MonaspiceAr Nerd Font"))
               (buffer-face-mode t)))
	)

(global-set-key (kbd "C-x C-b") 'buffer-menu)

(put 'text-scale-adjust 'disabled t)

(setq confirm-kill-emacs 'y-or-n-p)

(defun close-and-kill-this-pane ()
	"If there are multiple windows, then close this pane and kill the buffer in it also."
	(interactive)
	(kill-this-buffer)
  (if (not (one-window-p))
			(delete-window)))
(global-set-key (kbd "s-w") 'close-and-kill-this-pane)

(global-set-key [(control wheel-up)] 'nil)
(global-set-key [(control wheel-down)] 'nil)

(use-package treesit-auto
  :config
  (global-treesit-auto-mode))
#+END_SRC
** Set path
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
(setq exec-path (append exec-path '("/usr/local/bin/")))
#+END_SRC
** =alert=
#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+END_SRC
* Editing
** Type with Ease
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1) ;; typing replaces selected word

(global-flycheck-mode 1)
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))

(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 85)
(setq-default tab-width 2)

(electric-pair-mode 1)

(use-package comment-dwim-2
  :bind
  ("M-;" . comment-dwim-2))
#+END_SRC
** Completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :custom
  (company-dabbrev-downcase 0)
	(company-idle-delay 0.25)
	(company-minimum-prefix-length 4)
	(company-tooltip-align-annotations t)
	(emojify-company-tooltips-p t)
)

;; saves mini-buffer history
(use-package savehist
  :init (savehist-mode)
	)

(use-package yasnippet
  :init (yas-global-mode 1)
)

(use-package which-key
  :ensure nil
  :diminish
  :custom
  (which-key-mode t)
  (which-key-add-column-padding 2)
  (which-key-allow-multiple-replacements t)
  (which-key-idle-delay 0.8)
  (which-key-min-display-lines 6)
  (which-key-side-window-slot -10)
)
#+END_SRC
** Quick dictionary
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :bind ("C-c d" . define-word-at-point))

(use-package mw-thesaurus
  :bind ("C-c t" . mw-thesaurus-lookup-at-point)
)
#+END_SRC
** =markdown-mode=
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
)
#+END_SRC
** =drag-stuff=
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :init (drag-stuff-global-mode 1)
  :bind (("<C-M-up>" . drag-stuff-up)
				 ("<C-M-down>" . drag-stuff-down))
 )
#+END_SRC
** multicursor
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
)
#+END_SRC
* PDF
#+begin_src emacs-lisp
(add-to-list
 'display-buffer-alist
 '("\\.pdf$*" (display-buffer-reuse-window display-buffer-in-side-window)
   (window-width . 0.5)
   (side . left)))

(use-package pdf-tools
	:defer t
	:mode  ("\\.pdf\\'" . pdf-view-mode)
	)
#+end_src
* org
** Prerequisite
#+BEGIN_SRC
(global-font-lock-mode 1)
#+end_src
** Cosmetics for Org
#+begin_src emacs-lisp
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
(set-face-attribute 'org-headline-done nil :foreground "#84959c")
#+end_src
** =org=
#+BEGIN_SRC emacs-lisp
;; add org-mode to prog-mode
(add-hook 'org-mode-hook
          (lambda () (run-hooks 'prog-mode-hook)))

(use-package org
  :init (org-clock-persistence-insinuate)
	:hook ((org-mode . org-indent-mode)
				 (org-mode . turn-on-org-cdlatex))
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c b" . org-switchb)
         ("C-c C-x C-o" . org-clock-out)
         )
	:custom
	(org-startup-folded t)
	(org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t)
	(org-clock-persist 'history)
	(org-startup-indented t)
	(org-startup-with-inline-images t)
	(org-log-repeat nil)
	(org-ellipsis "↴")
  (org-default-notes-file (concat org-directory "/notes.org"))
	(org-agenda-span 1)
  (org-support-shift-select t)
  (org-todo-keywords (quote ((sequence "TODO" "IN PROGRESS" "PAUSED" "|" "DONE"))))
  (org-clock-idle-time 15)
	(org-agenda-skip-scheduled-if-done t)
	(org-agenda-skip-deadline-if-done t)
	(org-agenda-skip-scheduled-repeats-after-deadline t)
  (agenda-skip-scheduled-if-deadline-is-shown 'repeated-after-deadline)
  (inhibit-compacting-font-caches t)
	(org-refile-use-outline-path "file")
  (org-columns-default-format "%50ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
  :config
  (setq org-agenda-files '("~/Org/planning.org" "~/Org/Research" "~/Org/OrgRoam"))
  (setq org-agenda-deadline-faces
        '((1.001 . error)
          (1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . org-upcoming-distant-deadline)))

	(defun org-journal-find-location ()
    (org-journal-new-entry t)
    (goto-char (point-max))
    (re-search-backward "^\\*")
    )

  (setq org-capture-templates
      '(("t" "TODO Entry" entry (file "~/Org/Planning.org")
         "* TODO %^{Description}\n")
        ("j" "Journal Entry" entry
           (function org-journal-find-location)
           "* %(format-time-string org-journal-time-format) %^{Title}\n%?")
        ("r" "Weekly Review" entry
           (function org-journal-find-location)
           "* Weekly Review %(format-time-string org-journal-time-format)\n%i%?" :created t)
        ("k" "Quote" entry (file "~/Org/Babel/quotes.org")
         "* %^{Author}, /%^{Work}/\n%U\n%i#+BEGIN_QUOTE\n%?\n#+END_QUOTE\n")
        ("b" "Book" entry (file "~/Org/Babel/books.org")
         "* TODO %^{Work}\n+ %^{Author}\n+ %u\n")
        )
      )
)

(use-package org-cdlatex
	:ensure nil
	:after org
	:bind
	  (:map org-cdlatex-mode-map
        ("`" . org-cdlatex-math-modify)
        ("'" . nil)
        ("@" . cdlatex-math-symbol)))
#+END_SRC
** =org-fragtog=
#+begin_src emacs-lisp
(use-package org-fragtog
	:after org
	:custom
	(org-fragtog-preview-delay 0.5)
	(org-startup-with-latex-preview t)
	:config
	(setq org-format-latex-options
				(plist-put org-format-latex-options :scale 1.8))
	)
#+end_src
** =org-super-agenda=
#+begin_src emacs-lisp
(use-package org-super-agenda
	:hook (org-mode . org-super-agenda-mode)
	:config
	(setq org-super-agenda-groups
       '((:auto-outline-path t)
         ))
	)
#+end_src
** =org-modern=
#+begin_src emacs-lisp
(use-package org-modern
	:hook (org-mode . global-org-modern-mode)
	:custom
	(org-modern-star 'fold)
  (org-catch-invisible-edits 'show-and-error)
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)
  (org-agenda-tags-column 0)
  (org-modern-block-name 0)
  (org-modern-keyword nil)
  (org-modern-priority nil)
	(org-modern-fold-stars
	 '(("⇛" . "⇓") ("⏵" . "▽") ("⯈" . "⯆") ("▸" . "▿") ("▸" . "▿")))
	:config
	(setq org-modern-todo-faces
	     (quote (("IN PROGRESS" :foreground "orange" :inverse-video t :weight semibold)
							 ("PAUSED" :foreground "yellow" :inverse-video t :weight semibold)
							 )))
	(set-face-attribute 'org-modern-progress-complete
											nil :background "#c3e88d" :foreground "gray10")
	(set-face-attribute 'org-modern-progress-incomplete
											nil :background "#bbbeb7" :foreground "gray10")
	)
#+end_src
** =calfw=
#+begin_src emacs-lisp
(use-package calfw
	:defer t
	)

(use-package calfw-org
	:bind ("C-c o c" . cfw:open-org-calendar)
	:custom
	(cfw:org-overwrite-default-keybinding t)
	)
#+end_src
** =org-bullets=
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
	:hook (org-mode . org-bullets-mode)
	)
#+END_SRC

** =org-journal=
#+BEGIN_SRC emacs-lisp
(use-package org-journal
	:defer t
  :custom
  (org-journal-file-type 'yearly)
  (org-journal-file-format "%Y.org")
  (org-journal-dir  "~/Org/journal/")
  (org-journal-date-format "%A, %m/%d/%Y")
  (org-journal-time-format "%H:%M")
)

(with-eval-after-load 'org-journal
  (remove-hook 'calendar-today-visible-hook 'org-journal-mark-entries)
  (remove-hook 'calendar-today-invisible-hook 'org-journal-mark-entries))

#+END_SRC

** =org-pomodoro=
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :after org
  :bind (("C-c p" . org-pomodoro))
  :custom
  (org-pomodoro-ticking-sound-p nil)
  (org-clock-mode-line-total 'today)
  (org-pomodoro-manual-break t)
  (org-pomodoro-length 50)
  (org-pomodoro-short-break-length 5)
  (org-pomodoro-long-break-length 10)
  (org-pomodoro-long-break-frequency 2)
  (org-pomodoro-finished-sound "~/.emacs.d/audio/goes-without-saying.mp3")
  (org-pomodoro-overtime-sound "~/.emacs.d/audio/goes-without-saying.mp3")
  (org-pomodoro-short-break-sound "~/.emacs.d/audio/deduction.mp3")
  (org-pomodoro-long-break-sound "~/.emacs.d/audio/solemn.mp3")
)
#+END_SRC

** =org-roam=
#+begin_src emacs-lisp
(use-package org-roam
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture))
  :custom
  (org-roam-directory (file-truename "~/Org/OrgRoam/"))
  :config
  (org-roam-db-autosync-mode))
#+end_src
** TODO =org-rifle=
#+begin_src emacs-lisp
(use-package helm-org-rifle
	:after org
	)
#+end_src
** =zotxt=
#+begin_src emacs-lisp
(use-package zotxt
	:hook (org-mode . org-zotxt-mode)
	:custom
	(zotxt-default-bibliography-style "chicago-author-date")
	(zotxt-default-search-method :title-creator-year)
	)
#+end_src
* LaTeX
** =AUCTeX=
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook
          (lambda () (run-hooks 'prog-mode-hook)))

(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . LaTeX-mode)
  :bind ("s-[" . TeX-command-run-all) ;; C-c C-a
	:hook ((LaTeX-mode . TeX-source-correlate-mode)
				 (LaTeX-mode . turn-on-reftex))
	:custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (LaTeX-electric-left-right-brace 1)
  (TeX-source-correlate-method 'synctex)
  (TeX-source-correlate-mode t)
  (TeX-source-correlate-start-server t)
  (TeX-PDF-mode t)
  :config
	(setq emojify-mode -1)
	(setq-default TeX-engine 'luatex)
  (setq-default TeX-master t)
  (setq LaTeX-clean-intermediate-suffixes
         (append LaTeX-clean-intermediate-suffixes
                 (list "\\.fdb_latexmk" "\\.tex~" "\\.log" "\\.tdo"))
         LaTeX-clean-output-suffixes
         (append LaTeX-clean-output-suffixes
                 (list "\\.dvi" "\\.ps" "\\.xdv" "\\.log" "\\.prv" "\\.fmt")))

	(setq reftex-plug-into-AUCTeX t)

	(setq TeX-view-program-list
      '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b")))

	(setq TeX-view-program-selection '((output-pdf "Skim")))
)
#+END_SRC
** =cdlatex=
#+BEGIN_SRC emacs-lisp
(eval-after-load 'cdlatex ;; disable cdlatex auto paren
  (lambda ()
    (substitute-key-definition 'cdlatex-pbb nil cdlatex-mode-map)
    (substitute-key-definition 'cdlatex-dollar nil cdlatex-mode-map)
		(substitute-key-definition 'cdlatex-sub-superscript nil cdlatex-mode-map)
    ;; yasnippet kdb takes priority
    (unless (eq (caar minor-mode-map-alist) 'yas-minor-mode)
      (let ((mykeys (assq 'yas-minor-mode minor-mode-map-alist)))
        (assq-delete-all 'yas-minor-mode minor-mode-map-alist)
        (add-to-list 'minor-mode-map-alist mykeys))))
)

(use-package cdlatex
  :hook (LaTeX-mode . turn-on-cdlatex)
  :init
  (setq cdlatex-math-modify-prefix 96  ;; "`"
        cdlatex-math-symbol-prefix 64) ;; "@"
	:config
  (setq cdlatex-math-symbol-alist
        '((?0 ("\\varnothing" ))
          (?e ("\\varepsilon"))
          (?> ("\\geq"))
          (?< ("\\leq" "\\vartriangleleft" "\\preccurlyeq"))
          (123 ("\\subseteq" "\\subset"))
          (125 ("\\supset" "\\supseteq"))
          (?~ ("\\simeq" "\\approx"))
          (?! ("\\neq" "\\neg"))
          (?c ("\\circ"))
          (?. ("\\ldots" "\\cdot"))
          (?[ ("\\Longleftarrow"))
          (?] ("\\Longrightarrow" "\\Rightarrow"))
          (?+ ("\\oplus"))
          (?| ("\\mid"))
          (?F ("\\Phi"))
          (?n ("\\nabla"))
          (?t ("\\tau" "\\to"))
          (?S ("\\sum" "\\Sigma"))
          (?* ("\\times" "\\otimes"))
          (?= ("\\equiv"))
					(?- ("\\vdash" "\\models"))
          (?B ("\\Box"))
          (?D ("\\Delta" "\\Diamond"))
					(?V ("\\bigvee"))
					(?& ("\\wedge" "\bigwedge"))
          ))
  (setq cdlatex-math-modify-alist
        '((?B "\\mathbb" nil t nil nil)
          (?c "\\mathcal" nil t nil nil)
          (?2 "\\sqrt" nil t nil nil)
          (?t "\\text" nil t nil nil)
          (?v "\\vv" nil t nil nil)
          (?f "\\mathfrak" nil t nil nil)
          (?m "\\pmod" nil t nil nil)
          (?- "\\overline" nil t nil nil)
          (?_ "\\underline" "\\underline" t nil nil)
          (?~ "\\widetilde" nil t nil nil)
          (?^ "\\widehat" nil t nil nil)
					(?s "\\mathsf" "\\textsf" t nil nil)
					(?b "\\bm" "\\textbf" t nil nil)
          ))
  (setq cdlatex-command-alist
      '(("axm" "Insert axiom environment"
         "" cdlatex-environment ("axiom") t nil)
        ("prop" "Insert proposition environment"
           "" cdlatex-environment ("proposition") t nil)
				("thm" "Insert theorem environment"
           "" cdlatex-environment ("theorem") t nil)
        ("lcm" "Insert `lcm'"
         "\\text{lcm}" cdlatex-position-cursor nil nil t)
        ("gal" "Insert Galois group"
         "\\text{Gal}(?)" cdlatex-position-cursor nil nil t)
        ("irr" "Insert `irr'"
         "\\text{irr}_{?}()" cdlatex-position-cursor nil nil t)
				("gn" "Insert gödel numbering"
         "\\ulcorner ?\\urcorner" cdlatex-position-cursor nil nil t)
        ("im" "Insert image"
         "\\text{im}(?)" cdlatex-position-cursor nil nil t)
				("mfa" "Insert A-quantifier in metalanguage"
         "\\rotatebox[origin=c]{180}{A}" cdlatex-position-cursor nil nil t)
				("lpa" "Insert L_PA"
         "\\mathcal{L}_{\\textsf{PA}}" cdlatex-position-cursor nil nil t)
        ))
)
#+END_SRC
* Lean
#+begin_src emacs-lisp
(use-package lean4-mode
	:mode ("\\.lean$" . lean4-mode)
  :commands lean4-mode
  :vc (:url "https://github.com/leanprover-community/lean4-mode.git"
       :rev :last-release
       ))
#+end_src
* TODO LLM
#+begin_src emacs-lisp
(use-package gptel
	)
#+end_src
* GitHub integration
** =Magit=
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)
	)
#+END_SRC
** Git-gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :custom
  (git-gutter:update-interval 0.5)
)

(use-package git-gutter-fringe
	:ensure nil
	:after git-gutter
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom)
	)
#+end_src
